ALTER SESSION SET CONTAINER = freepdb1;

CREATE USER wh_mall3 IDENTIFIED BY "wh_mall6537";
GRANT CONNECT, RESOURCE TO wh_mall3;

-- 등급(ranks) 테이블 생성
CREATE TABLE ranks (
    rank_name VARCHAR2(20) PRIMARY KEY,
    min_point NUMBER(20) NOT NULL,
    max_point NUMBER(20)
);

-- 사용자(users) 테이블 생성 (ranks에 외래키로 연결)
CREATE TABLE users (
    id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50),
    password CHAR(64),
    point    NUMBER(19),
    rank     VARCHAR2(20),
    role     VARCHAR2(10) CHECK (role IN ('user', 'admin')),
    CONSTRAINT fk_rank FOREIGN KEY (rank) REFERENCES ranks (rank_name)
);

-- 공지사항(notices) 테이블 생성
CREATE TABLE notices (
    nid         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title       VARCHAR2(200),
    content     CLOB,
    createdtime TIMESTAMP
);

-- 상품(products) 테이블 생성
CREATE TABLE products (
    pid   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pname VARCHAR2(100),
    price NUMBER,
    info  CLOB,
    stock NUMBER
);

-- 주문(orders) 테이블 생성
CREATE TABLE orders (
    oid         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id     NUMBER NOT NULL,
    product_id  NUMBER NOT NULL,
    quantity    NUMBER,
    total_price NUMBER,
    order_date  TIMESTAMP,
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES products (pid)
);

-- 등급(ranks) 데이터 삽입
INSERT INTO ranks VALUES ('Bronze',     0,           9999);
INSERT INTO ranks VALUES ('Silver',     10000,       99999);
INSERT INTO ranks VALUES ('Gold',       100000,      999999);
INSERT INTO ranks VALUES ('Platinum',   1000000,     99999999);
INSERT INTO ranks VALUES ('Diamond',    100000000,   999999999);
INSERT INTO ranks VALUES ('VIP',        1000000000,  NULL);

-- 누적 구매 금액 기준으로 등급 자동 업데이트
UPDATE users u
SET rank = (
    SELECT rank_name
    FROM ranks r
    WHERE (
              SELECT NVL(SUM(o.total_price), 0)
              FROM orders o
              WHERE o.user_id = u.id
          ) BETWEEN r.min_point AND NVL(r.max_point, 9999999999)
)
WHERE EXISTS (
    SELECT 1
    FROM ranks r
    WHERE (
              SELECT NVL(SUM(o.total_price), 0)
              FROM orders o
              WHERE o.user_id = u.id
          ) BETWEEN r.min_point AND NVL(r.max_point, 9999999999)
);

COMMIT;